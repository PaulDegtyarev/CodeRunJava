import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

public class DepthFirstSearch {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));

        String[] data = reader.readLine().split(" ");
        int N = Integer.parseInt(data[0]);
        int M = Integer.parseInt(data[1]);

        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < N + 1; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < M; i++) {
            String edge[] = reader.readLine().split(" ");
            int u = Integer.parseInt(edge[0]);
            int v = Integer.parseInt(edge[1]);
            graph.get(u).add(v);
            graph.get(v).add(u);
        }

        List<Integer> connectivityComponent = dfs(graph, 1);

        writer.write(Integer.toString(connectivityComponent.size()));
        writer.newLine();

        connectivityComponent.sort(null);
        for (int vertx : connectivityComponent){
            writer.write(Integer.toString(vertx));
            writer.write(" ");
        }
        writer.newLine();

        reader.close();
        writer.close();
    }

    private static List<Integer> dfs(List<List<Integer>> graph, int startVertex) {
        List<Integer> component = new ArrayList<>();
        boolean[] visited = new boolean[graph.size()];
        dfsHelper(graph, startVertex, visited, component);
        return component;
    }

    private static void dfsHelper(List<List<Integer>> graph, int currentVertex, boolean[] visited, List<Integer> component) {
        visited[currentVertex] = true;
        component.add(currentVertex);

        for (int adjacentVertex : graph.get(currentVertex)) {
            if (!visited[adjacentVertex]) {
                dfsHelper(graph, adjacentVertex, visited, component);
            }
        }
    }
}
